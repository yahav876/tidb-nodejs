{{- if .Values.tidb.enabled }}
{{- if .Values.tidb.tidb.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "tidb-data-pipeline.fullname" . }}-tidb
  labels:
    {{- include "tidb-data-pipeline.componentLabels" (dict "component" "tidb" "context" .) | nindent 4 }}
spec:
  replicas: {{ .Values.tidb.tidb.replicaCount }}
  selector:
    matchLabels:
      {{- include "tidb-data-pipeline.componentSelectorLabels" (dict "component" "tidb" "context" .) | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- include "tidb-data-pipeline.podAnnotations" . | nindent 8 }}
      labels:
        {{- include "tidb-data-pipeline.componentSelectorLabels" (dict "component" "tidb" "context" .) | nindent 8 }}
    spec:
      {{- include "tidb-data-pipeline.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "tidb-data-pipeline.serviceAccountName" . }}
      securityContext:
        {{- include "tidb-data-pipeline.podSecurityContext" . | nindent 8 }}
      initContainers:
        - name: wait-for-tikv
          image: busybox:1.35
          command: ['sh', '-c', 'until nc -z {{ include "tidb-data-pipeline.fullname" . }}-tikv-headless {{ .Values.tidb.tikv.service.port }}; do echo waiting for tikv; sleep 2; done;']
      containers:
        - name: tidb
          securityContext:
            {{- include "tidb-data-pipeline.containerSecurityContext" . | nindent 12 }}
          image: "{{ .Values.tidb.tidb.image.repository }}:{{ .Values.tidb.tidb.image.tag }}"
          imagePullPolicy: {{ .Values.tidb.tidb.image.pullPolicy }}
          command:
            - /tidb-server
            - --store=tikv
            - --path={{ include "tidb-data-pipeline.fullname" . }}-pd:{{ .Values.tidb.pd.service.clientPort }}
            - --advertise-address=$(POD_NAME).{{ include "tidb-data-pipeline.fullname" . }}-tidb
            - --log-level={{ .Values.tidb.tidb.config.log.level }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - name: mysql
              containerPort: 4000
              protocol: TCP
            - name: status
              containerPort: 10080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /status
              port: status
            {{- toYaml .Values.healthChecks.livenessProbe | nindent 12 }}
          readinessProbe:
            tcpSocket:
              port: mysql
            {{- toYaml .Values.healthChecks.readinessProbe | nindent 12 }}
          {{- include "tidb-data-pipeline.resources" .Values.tidb.tidb | nindent 10 }}
          volumeMounts:
            - name: config
              mountPath: /etc/tidb
      nodeSelector:
        {{- include "tidb-data-pipeline.nodeSelector" . | nindent 8 }}
      affinity:
        {{- include "tidb-data-pipeline.affinity" . | nindent 8 }}
      tolerations:
        {{- include "tidb-data-pipeline.tolerations" . | nindent 8 }}
      volumes:
        - name: config
          configMap:
            name: {{ include "tidb-data-pipeline.fullname" . }}-tidb-config
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "tidb-data-pipeline.fullname" . }}-tidb
  labels:
    {{- include "tidb-data-pipeline.componentLabels" (dict "component" "tidb" "context" .) | nindent 4 }}
spec:
  type: {{ .Values.tidb.tidb.service.type }}
  ports:
    - port: {{ .Values.tidb.tidb.service.port }}
      targetPort: mysql
      protocol: TCP
      name: mysql
    - port: {{ .Values.tidb.tidb.service.statusPort }}
      targetPort: status
      protocol: TCP
      name: status
  selector:
    {{- include "tidb-data-pipeline.componentSelectorLabels" (dict "component" "tidb" "context" .) | nindent 4 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "tidb-data-pipeline.fullname" . }}-tidb-config
  labels:
    {{- include "tidb-data-pipeline.componentLabels" (dict "component" "tidb" "context" .) | nindent 4 }}
data:
  tidb.toml: |
    [log]
    level = {{ .Values.tidb.tidb.config.log.level | quote }}
    format = {{ .Values.tidb.tidb.config.log.format | quote }}

    [performance]
    max-procs = {{ .Values.tidb.tidb.config.performance.maxProcs }}
    max-memory = {{ .Values.tidb.tidb.config.performance.maxMemory }}
    server-memory-quota = {{ .Values.tidb.tidb.config.performance.serverMemoryQuota }}
    memory-usage-alarm-ratio = {{ .Values.tidb.tidb.config.performance.memoryUsageAlarmRatio }}

    [prepared-plan-cache]
    enabled = {{ .Values.tidb.tidb.config.preparedPlanCache.enabled }}
    capacity = {{ .Values.tidb.tidb.config.preparedPlanCache.capacity }}
    memory-guard-ratio = {{ .Values.tidb.tidb.config.preparedPlanCache.memoryGuardRatio }}
---
{{- include "tidb-data-pipeline.podDisruptionBudget" (dict "component" "tidb" "values" .Values.tidb.tidb "context" .) }}
{{- end }}
{{- end }}