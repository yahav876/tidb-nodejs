{{- if .Values.kafka.enabled }}
{{- if .Values.kafka.zookeeper.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "tidb-data-pipeline.fullname" . }}-zookeeper
  labels:
    {{- include "tidb-data-pipeline.componentLabels" (dict "component" "zookeeper" "context" .) | nindent 4 }}
spec:
  serviceName: {{ include "tidb-data-pipeline.fullname" . }}-zookeeper-headless
  replicas: {{ .Values.kafka.zookeeper.replicaCount }}
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "tidb-data-pipeline.componentSelectorLabels" (dict "component" "zookeeper" "context" .) | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- include "tidb-data-pipeline.podAnnotations" . | nindent 8 }}
      labels:
        {{- include "tidb-data-pipeline.componentSelectorLabels" (dict "component" "zookeeper" "context" .) | nindent 8 }}
    spec:
      {{- include "tidb-data-pipeline.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "tidb-data-pipeline.serviceAccountName" . }}
      securityContext:
        {{- include "tidb-data-pipeline.podSecurityContext" . | nindent 8 }}
      containers:
        - name: zookeeper
          securityContext:
            {{- include "tidb-data-pipeline.containerSecurityContext" . | nindent 12 }}
          image: "{{ .Values.kafka.zookeeper.image.repository }}:{{ .Values.kafka.zookeeper.image.tag }}"
          imagePullPolicy: {{ .Values.kafka.zookeeper.image.pullPolicy }}
          command:
            - bash
            - -c
            - |
              set -e
              export ZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-}+1))
              echo "Starting Zookeeper with ID: $ZOOKEEPER_SERVER_ID"

              # Create myid file for Zookeeper
              mkdir -p /var/lib/zookeeper/data
              echo "$ZOOKEEPER_SERVER_ID" > /var/lib/zookeeper/data/myid

              # Set proper Zookeeper ensemble configuration
              export ZOOKEEPER_SERVERS=""
              for i in $(seq 0 $(({{ .Values.kafka.zookeeper.replicaCount }} - 1))); do
                if [ $i -gt 0 ]; then
                  ZOOKEEPER_SERVERS="${ZOOKEEPER_SERVERS};"
                fi
                ZOOKEEPER_SERVERS="${ZOOKEEPER_SERVERS}{{ include "tidb-data-pipeline.fullname" . }}-zookeeper-${i}.{{ include "tidb-data-pipeline.fullname" . }}-zookeeper-headless.{{ .Release.Namespace }}.svc.cluster.local:2888:3888"
              done
              export ZOOKEEPER_SERVERS

              # Start Zookeeper
              exec /etc/confluent/docker/run
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: {{ .Values.kafka.zookeeper.env.ZOOKEEPER_CLIENT_PORT | quote }}
            - name: ZOOKEEPER_TICK_TIME
              value: {{ .Values.kafka.zookeeper.env.ZOOKEEPER_TICK_TIME | quote }}
            - name: ZOOKEEPER_INIT_LIMIT
              value: {{ .Values.kafka.zookeeper.env.ZOOKEEPER_INIT_LIMIT | quote }}
            - name: ZOOKEEPER_SYNC_LIMIT
              value: {{ .Values.kafka.zookeeper.env.ZOOKEEPER_SYNC_LIMIT | quote }}
            - name: ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT
              value: "3"
            - name: ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL
              value: "24"
            - name: ZOOKEEPER_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOOKEEPER_4LW_COMMANDS_WHITELIST
              value: "ruok,mntr,srvr,stat"
          ports:
            - name: client
              containerPort: 2181
              protocol: TCP
            - name: follower
              containerPort: 2888
              protocol: TCP
            - name: election
              containerPort: 3888
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: client
            {{- toYaml .Values.healthChecks.livenessProbe | nindent 12 }}
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - |
                  echo "ruok" | nc -w 2 localhost 2181 | grep "imok" && \
                  echo "mntr" | nc -w 2 localhost 2181 | grep "zk_server_state"
            {{- toYaml .Values.healthChecks.readinessProbe | nindent 12 }}
          startupProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - echo "ruok" | nc -w 2 localhost 2181 | grep "imok"
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 10
          {{- include "tidb-data-pipeline.resources" .Values.kafka.zookeeper | nindent 10 }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/zookeeper
      nodeSelector:
        {{- include "tidb-data-pipeline.nodeSelector" . | nindent 8 }}
      affinity:
        {{- include "tidb-data-pipeline.affinity" . | nindent 8 }}
      tolerations:
        {{- include "tidb-data-pipeline.tolerations" . | nindent 8 }}
  {{- if .Values.kafka.zookeeper.persistence.enabled }}
  volumeClaimTemplates:
    {{- include "tidb-data-pipeline.volumeClaimTemplate" (dict "name" "data" "size" .Values.kafka.zookeeper.persistence.size "storageClass" .Values.global.persistence.storageClass) | nindent 4 }}
  {{- else }}
      volumes:
        - name: data
          emptyDir: {}
  {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "tidb-data-pipeline.fullname" . }}-zookeeper
  labels:
    {{- include "tidb-data-pipeline.componentLabels" (dict "component" "zookeeper" "context" .) | nindent 4 }}
spec:
  type: ClusterIP
  ports:
    - port: 2181
      targetPort: client
      protocol: TCP
      name: client
  selector:
    {{- include "tidb-data-pipeline.componentSelectorLabels" (dict "component" "zookeeper" "context" .) | nindent 4 }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "tidb-data-pipeline.fullname" . }}-zookeeper-headless
  labels:
    {{- include "tidb-data-pipeline.componentLabels" (dict "component" "zookeeper" "context" .) | nindent 4 }}
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 2181
      targetPort: client
      protocol: TCP
      name: client
    - port: 2888
      targetPort: follower
      protocol: TCP
      name: follower
    - port: 3888
      targetPort: election
      protocol: TCP
      name: election
  selector:
    {{- include "tidb-data-pipeline.componentSelectorLabels" (dict "component" "zookeeper" "context" .) | nindent 4 }}
---
{{- include "tidb-data-pipeline.podDisruptionBudget" (dict "component" "zookeeper" "values" .Values.kafka.zookeeper "context" .) }}
{{- end }}
{{- end }}