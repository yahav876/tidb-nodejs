{{- if .Values.kafka.enabled }}
{{- if .Values.kafka.broker.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "tidb-data-pipeline.fullname" . }}-kafka
  labels:
    {{- include "tidb-data-pipeline.componentLabels" (dict "component" "kafka" "context" .) | nindent 4 }}
spec:
  serviceName: {{ include "tidb-data-pipeline.fullname" . }}-kafka-headless
  replicas: {{ .Values.kafka.broker.replicaCount }}
  selector:
    matchLabels:
      {{- include "tidb-data-pipeline.componentSelectorLabels" (dict "component" "kafka" "context" .) | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- include "tidb-data-pipeline.podAnnotations" . | nindent 8 }}
      labels:
        {{- include "tidb-data-pipeline.componentSelectorLabels" (dict "component" "kafka" "context" .) | nindent 8 }}
    spec:
      {{- include "tidb-data-pipeline.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "tidb-data-pipeline.serviceAccountName" . }}
      securityContext:
        {{- include "tidb-data-pipeline.podSecurityContext" . | nindent 8 }}
      initContainers:
        - name: wait-for-zookeeper
          image: busybox:1.35
          command: ['sh', '-c', 'until nc -z {{ include "tidb-data-pipeline.fullname" . }}-zookeeper 2181; do echo waiting for zookeeper; sleep 2; done;']
      containers:
        - name: kafka
          securityContext:
            {{- include "tidb-data-pipeline.containerSecurityContext" . | nindent 12 }}
          image: "{{ .Values.kafka.broker.image.repository }}:{{ .Values.kafka.broker.image.tag }}"
          imagePullPolicy: {{ .Values.kafka.broker.image.pullPolicy }}
          env:
            - name: KAFKA_BROKER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['statefulset.kubernetes.io/pod-name']
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: {{ include "tidb-data-pipeline.fullname" . }}-zookeeper:2181
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://$(POD_NAME).{{ include "tidb-data-pipeline.fullname" . }}-kafka-headless:9092,PLAINTEXT_HOST://{{ include "tidb-data-pipeline.fullname" . }}-kafka:{{ .Values.kafka.broker.service.externalPort }}
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: PLAINTEXT
            - name: KAFKA_LISTENERS
              value: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:{{ .Values.kafka.broker.service.externalPort }}
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: {{ .Values.kafka.broker.config.autoCreateTopicsEnable | quote }}
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: {{ .Values.kafka.broker.config.defaultReplicationFactor | quote }}
            - name: KAFKA_MIN_INSYNC_REPLICAS
              value: {{ .Values.kafka.broker.config.minInsyncReplicas | quote }}
            - name: KAFKA_NUM_PARTITIONS
              value: {{ .Values.kafka.broker.config.numPartitions | quote }}
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: {{ .Values.kafka.broker.config.offsetsTopicReplicationFactor | quote }}
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: {{ .Values.kafka.broker.config.transactionStateLogReplicationFactor | quote }}
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: {{ .Values.kafka.broker.config.transactionStateLogMinIsr | quote }}
            - name: KAFKA_LOG_RETENTION_HOURS
              value: {{ .Values.kafka.broker.config.logRetentionHours | quote }}
            - name: KAFKA_LOG_RETENTION_BYTES
              value: {{ .Values.kafka.broker.config.logRetentionBytes | quote }}
            - name: KAFKA_LOG_SEGMENT_BYTES
              value: {{ .Values.kafka.broker.config.logSegmentBytes | quote }}
            - name: KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE
              value: {{ .Values.kafka.broker.config.uncleanLeaderElection | quote }}
            - name: KAFKA_COMPRESSION_TYPE
              value: {{ .Values.kafka.broker.config.compressionType | quote }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - name: kafka
              containerPort: 9092
              protocol: TCP
            - name: external
              containerPort: {{ .Values.kafka.broker.service.externalPort }}
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - kafka-broker-api-versions
                - --bootstrap-server
                - localhost:9092
            {{- toYaml .Values.healthChecks.livenessProbe | nindent 12 }}
          readinessProbe:
            exec:
              command:
                - kafka-broker-api-versions
                - --bootstrap-server
                - localhost:9092
            {{- toYaml .Values.healthChecks.readinessProbe | nindent 12 }}
          {{- include "tidb-data-pipeline.resources" .Values.kafka.broker | nindent 10 }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/kafka/data
      nodeSelector:
        {{- include "tidb-data-pipeline.nodeSelector" . | nindent 8 }}
      affinity:
        {{- include "tidb-data-pipeline.affinity" . | nindent 8 }}
      tolerations:
        {{- include "tidb-data-pipeline.tolerations" . | nindent 8 }}
  {{- if .Values.kafka.broker.persistence.enabled }}
  volumeClaimTemplates:
    {{- include "tidb-data-pipeline.volumeClaimTemplate" (dict "name" "data" "size" .Values.kafka.broker.persistence.size "storageClass" .Values.global.persistence.storageClass) | nindent 4 }}
  {{- else }}
      volumes:
        - name: data
          emptyDir: {}
  {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "tidb-data-pipeline.fullname" . }}-kafka
  labels:
    {{- include "tidb-data-pipeline.componentLabels" (dict "component" "kafka" "context" .) | nindent 4 }}
spec:
  type: {{ .Values.kafka.broker.service.type }}
  ports:
    - port: {{ .Values.kafka.broker.service.port }}
      targetPort: kafka
      protocol: TCP
      name: kafka
    - port: {{ .Values.kafka.broker.service.externalPort }}
      targetPort: external
      protocol: TCP
      name: external
  selector:
    {{- include "tidb-data-pipeline.componentSelectorLabels" (dict "component" "kafka" "context" .) | nindent 4 }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "tidb-data-pipeline.fullname" . }}-kafka-headless
  labels:
    {{- include "tidb-data-pipeline.componentLabels" (dict "component" "kafka" "context" .) | nindent 4 }}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: {{ .Values.kafka.broker.service.port }}
      targetPort: kafka
      protocol: TCP
      name: kafka
  selector:
    {{- include "tidb-data-pipeline.componentSelectorLabels" (dict "component" "kafka" "context" .) | nindent 4 }}
---
{{- include "tidb-data-pipeline.podDisruptionBudget" (dict "component" "kafka" "values" .Values.kafka.broker "context" .) }}
{{- end }}
{{- end }}